//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { DepartmentsEntity } from './db/Departments.entity';
import { InitiativesEntity } from './db/Initiatives.entity';
import { GoalsEntity } from './db/Goals.entity';
import { EmissionsourcesEntity } from './db/Emissionsources.entity';
import { ResourceusageEntity } from './db/Resourceusage.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      DepartmentsEntity,
      InitiativesEntity,
      GoalsEntity,
      EmissionsourcesEntity,
      ResourceusageEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        {
          userName: 'AlexGreen',
          department: 1,
          password: 'p@ssW0rd1',
          email: 'alex.green@example.com',
        },
        {
          userName: 'SamBlue',
          department: 2,
          password: 'p@ssW0rd2',
          email: 'sam.blue@example.com',
        },
        {
          userName: 'JordanRed',
          department: 3,
          password: 'p@ssW0rd3',
          email: 'jordan.red@example.com',
        },
        {
          userName: 'CaseyYellow',
          department: 4,
          password: 'p@ssW0rd4',
          email: 'casey.yellow@example.com',
        },
        {
          userName: 'TaylorPurple',
          department: 5,
          password: 'p@ssW0rd5',
          email: 'taylor.purple@example.com',
        },
      ],
      Departments: [
        {
          departmentName: 'Sustainability Initiatives',
          departmentHead: 'Alex Johnson',
        },
        {
          departmentName: 'Renewable Energy Projects',
          departmentHead: 'Samantha Ruiz',
        },
        {
          departmentName: 'Waste Reduction Team',
          departmentHead: 'Michael Chen',
        },
        {
          departmentName: 'Eco-friendly Procurement',
          departmentHead: 'Linda Kim',
        },
        {
          departmentName: 'Carbon Footprint Analysis',
          departmentHead: 'Raj Patel',
        },
      ],
      Initiatives: [
        {
          name: 'Green Office Challenge',
          description:
            'A month-long initiative to reduce office paper usage by 50%.',
          startDate: '2023-04-01T00:00:00Z',
          endDate: '2023-04-30T23:59:59Z',
          relatedDepartment: 1,
          status: 'Active',
        },
        {
          name: 'Carpool Week',
          description:
            'Encourage employees to carpool, reducing carbon emissions.',
          startDate: '2023-05-15T00:00:00Z',
          endDate: '2023-05-21T23:59:59Z',
          relatedDepartment: 2,
          status: 'Planned',
        },
        {
          name: 'RecycleMania',
          description:
            'Increase recycling rates by 30% through education and incentives.',
          startDate: '2023-06-01T00:00:00Z',
          endDate: '2023-06-30T23:59:59Z',
          relatedDepartment: 3,
          status: 'Active',
        },
        {
          name: 'Energy-Saving Stars',
          description:
            'Implement energy-saving measures to reduce electricity use by 20%.',
          startDate: '2023-07-01T00:00:00Z',
          endDate: '2023-07-31T23:59:59Z',
          relatedDepartment: 4,
          status: 'Upcoming',
        },
        {
          name: 'Water Wise',
          description:
            'Reduce water usage throughout the company by installing efficient fixtures.',
          startDate: '2023-08-01T00:00:00Z',
          endDate: '2023-08-31T23:59:59Z',
          relatedDepartment: 5,
          status: 'Planned',
        },
      ],
      Goals: [
        {
          name: 'Reduce Paper Use',
          description: 'Initiative to reduce paper usage in the office by 50%',
          targetDate: '2023-12-31T00:00:00Z',
          relatedDepartment: 1,
          status: 'In Progress',
        },
        {
          name: 'Energy Efficient Lighting',
          description: 'Replace all old bulbs with energy-efficient LED lights',
          targetDate: '2023-06-30T00:00:00Z',
          relatedDepartment: 2,
          status: 'Completed',
        },
        {
          name: 'Water Conservation',
          description: 'Implement water-saving devices in all restrooms',
          targetDate: '2024-03-31T00:00:00Z',
          relatedDepartment: 3,
          status: 'Planned',
        },
        {
          name: 'Recycling Program',
          description:
            'Start a comprehensive recycling program for paper, plastic, and metal waste',
          targetDate: '2023-09-30T00:00:00Z',
          relatedDepartment: 4,
          status: 'In Progress',
        },
        {
          name: 'Green Commuting',
          description:
            'Encourage employees to use public transportation, carpool, bike, or walk to work',
          targetDate: '2023-11-30T00:00:00Z',
          relatedDepartment: 5,
          status: 'In Progress',
        },
      ],
      Emissionsources: [
        {
          sourceType: 'Electricity',
          quantityUsed: 5000,
          emissionFactors: 0.233,
          totalEmissions: 1165,
        },
        {
          sourceType: 'Natural Gas',
          quantityUsed: 1500,
          emissionFactors: 0.185,
          totalEmissions: 277.5,
        },
        {
          sourceType: 'Diesel',
          quantityUsed: 800,
          emissionFactors: 2.68,
          totalEmissions: 2144,
        },
        {
          sourceType: 'Petrol',
          quantityUsed: 600,
          emissionFactors: 2.31,
          totalEmissions: 1386,
        },
        {
          sourceType: 'Coal',
          quantityUsed: 2000,
          emissionFactors: 1.9,
          totalEmissions: 3800,
        },
      ],
      Resourceusage: [
        {
          resourceType: 'Electricity',
          quantityConsumed: 5000,
          unitOfMeasurement: 'kWh',
          periodOfConsumption: '2023-03-01T00:00:00Z',
        },
        {
          resourceType: 'Water',
          quantityConsumed: 12000,
          unitOfMeasurement: 'Liters',
          periodOfConsumption: '2023-03-01T00:00:00Z',
        },
        {
          resourceType: 'Natural Gas',
          quantityConsumed: 800,
          unitOfMeasurement: 'Cubic Meters',
          periodOfConsumption: '2023-03-01T00:00:00Z',
        },
        {
          resourceType: 'Paper',
          quantityConsumed: 200,
          unitOfMeasurement: 'Kilograms',
          periodOfConsumption: '2023-03-01T00:00:00Z',
        },
        {
          resourceType: 'Diesel Fuel',
          quantityConsumed: 1500,
          unitOfMeasurement: 'Liters',
          periodOfConsumption: '2023-03-01T00:00:00Z',
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('DepartmentsEntity', data.Departments);
      await this.SeedResource('InitiativesEntity', data.Initiatives);
      await this.SeedResource('GoalsEntity', data.Goals);
      await this.SeedResource('EmissionsourcesEntity', data.Emissionsources);
      await this.SeedResource('ResourceusageEntity', data.Resourceusage);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
